<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/admin/maintenance/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/maintenance/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import React, { useEffect, useState } from &quot;react&quot;;&#10;import { supabase } from &quot;@/app/lib/supabase/client&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;&#10;export default function AdminMaintenancePage() {&#10;    const [authorized, setAuthorized] = useState&lt;boolean | null&gt;(null);&#10;    const [maintenance, setMaintenance] = useState&lt;any[]&gt;([]);&#10;    const [maintenanceLoading, setMaintenanceLoading] = useState(true);&#10;    const [maintenanceError, setMaintenanceError] = useState(&quot;&quot;);&#10;&#10;    useEffect(() =&gt; {&#10;        async function checkAdmin() {&#10;            const { data: { user } } = await supabase.auth.getUser();&#10;            if (!user) {&#10;                setAuthorized(false);&#10;                return;&#10;            }&#10;            const { data, error } = await supabase&#10;                .from('users')&#10;                .select('role')&#10;                .eq('id', user.id)&#10;                .single();&#10;            setAuthorized(data?.role === 'ADMIN');&#10;        }&#10;        checkAdmin();&#10;    }, []);&#10;&#10;    useEffect(() =&gt; {&#10;        async function fetchMaintenance() {&#10;            setMaintenanceLoading(true);&#10;            setMaintenanceError(&quot;&quot;);&#10;            const { data, error } = await supabase&#10;                .from('maintenance_requests')&#10;                .select('id, tenant_id, suite_id, description, status, created_at, resolved_at')&#10;                .order('created_at', { ascending: false });&#10;            if (error) setMaintenanceError(error.message);&#10;            setMaintenance(data || []);&#10;            setMaintenanceLoading(false);&#10;        }&#10;        if (authorized) fetchMaintenance();&#10;    }, [authorized]);&#10;&#10;    async function updateStatus(id: string, status: string) {&#10;        await supabase.from('maintenance_requests').update({ status, resolved_at: status === 'RESOLVED' ? new Date().toISOString() : null }).eq('id', id);&#10;        setMaintenance((prev) =&gt; prev.map((req) =&gt; req.id === id ? { ...req, status, resolved_at: status === 'RESOLVED' ? new Date().toISOString() : null } : req));&#10;    }&#10;&#10;    if (authorized === null) {&#10;        return &lt;div className=&quot;text-white&quot;&gt;Loading...&lt;/div&gt;;&#10;    }&#10;    if (!authorized) {&#10;        return &lt;div className=&quot;flex min-h-svh w-full items-center justify-center p-6 md:p-10 bg-[#2f2f38] text-white&quot;&gt;&#10;            Unauthorized access: You must be an admin to view this page.&#10;        &lt;/div&gt;;&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;min-h-screen w-full bg-[#181820] flex flex-col items-center py-12 px-4&quot;&gt;&#10;            &lt;div className=&quot;w-full max-w-6xl mx-auto&quot;&gt;&#10;                &lt;h1 className=&quot;text-3xl font-extrabold mb-8 text-center text-purple-400 drop-shadow&quot;&gt;Maintenance Requests&lt;/h1&gt;&#10;                &lt;div className=&quot;bg-[#23232b] p-8 rounded-xl shadow border border-purple-900/30&quot;&gt;&#10;                    {maintenanceLoading ? (&#10;                        &lt;div className=&quot;text-gray-400&quot;&gt;Loading...&lt;/div&gt;&#10;                    ) : maintenanceError ? (&#10;                        &lt;div className=&quot;text-red-400&quot;&gt;{maintenanceError}&lt;/div&gt;&#10;                    ) : maintenance.length === 0 ? (&#10;                        &lt;div className=&quot;text-gray-400&quot;&gt;No maintenance requests found.&lt;/div&gt;&#10;                    ) : (&#10;                        &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;                            &lt;table className=&quot;min-w-full divide-y divide-purple-900/30&quot;&gt;&#10;                                &lt;thead className=&quot;bg-[#23232b]&quot;&gt;&#10;                                    &lt;tr&gt;&#10;                                        &lt;th className=&quot;px-4 py-2 text-left text-xs font-medium text-purple-300 uppercase&quot;&gt;Tenant&lt;/th&gt;&#10;                                        &lt;th className=&quot;px-4 py-2 text-left text-xs font-medium text-purple-300 uppercase&quot;&gt;Suite&lt;/th&gt;&#10;                                        &lt;th className=&quot;px-4 py-2 text-left text-xs font-medium text-purple-300 uppercase&quot;&gt;Description&lt;/th&gt;&#10;                                        &lt;th className=&quot;px-4 py-2 text-left text-xs font-medium text-purple-300 uppercase&quot;&gt;Status&lt;/th&gt;&#10;                                        &lt;th className=&quot;px-4 py-2 text-left text-xs font-medium text-purple-300 uppercase&quot;&gt;Created&lt;/th&gt;&#10;                                        &lt;th className=&quot;px-4 py-2 text-left text-xs font-medium text-purple-300 uppercase&quot;&gt;Actions&lt;/th&gt;&#10;                                    &lt;/tr&gt;&#10;                                &lt;/thead&gt;&#10;                                &lt;tbody className=&quot;bg-[#181820] divide-y divide-purple-900/30&quot;&gt;&#10;                                    {maintenance.map((req) =&gt; (&#10;                                        &lt;tr key={req.id} className=&quot;hover:bg-purple-900/10 transition-colors&quot;&gt;&#10;                                            &lt;td className=&quot;px-4 py-2 whitespace-nowrap&quot;&gt;{req.tenant_id}&lt;/td&gt;&#10;                                            &lt;td className=&quot;px-4 py-2 whitespace-nowrap&quot;&gt;{req.suite_id}&lt;/td&gt;&#10;                                            &lt;td className=&quot;px-4 py-2 whitespace-nowrap max-w-xs truncate&quot; title={req.description}&gt;{req.description}&lt;/td&gt;&#10;                                            &lt;td className=&quot;px-4 py-2 whitespace-nowrap&quot;&gt;&#10;                                                &lt;span className={&#10;                                                    req.status === 'OPEN' ? 'text-yellow-400' :&#10;                                                    req.status === 'IN_PROGRESS' ? 'text-blue-400' :&#10;                                                    req.status === 'RESOLVED' ? 'text-green-400' : 'text-gray-400'&#10;                                                }&gt;{req.status}&lt;/span&gt;&#10;                                            &lt;/td&gt;&#10;                                            &lt;td className=&quot;px-4 py-2 whitespace-nowrap text-gray-400&quot;&gt;{new Date(req.created_at).toLocaleString()}&lt;/td&gt;&#10;                                            &lt;td className=&quot;px-4 py-2 whitespace-nowrap flex gap-2&quot;&gt;&#10;                                                {req.status !== 'RESOLVED' &amp;&amp; (&#10;                                                    &lt;Button size=&quot;sm&quot; className=&quot;bg-blue-700 hover:bg-blue-800 text-white px-3 py-1 rounded&quot; onClick={() =&gt; updateStatus(req.id, req.status === 'OPEN' ? 'IN_PROGRESS' : 'RESOLVED')}&gt;&#10;                                                        {req.status === 'OPEN' ? 'Mark In Progress' : 'Mark Resolved'}&#10;                                                    &lt;/Button&gt;&#10;                                                )}&#10;                                            &lt;/td&gt;&#10;                                        &lt;/tr&gt;&#10;                                    ))}&#10;                                &lt;/tbody&gt;&#10;                            &lt;/table&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import React, { useEffect, useState } from &quot;react&quot;;&#10;import { supabase } from &quot;@/app/lib/supabase/client&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;&#10;export default function AdminMaintenancePage() {&#10;    const [authorized, setAuthorized] = useState&lt;boolean | null&gt;(null);&#10;    const [maintenance, setMaintenance] = useState&lt;any[]&gt;([]);&#10;    const [maintenanceLoading, setMaintenanceLoading] = useState(true);&#10;    const [maintenanceError, setMaintenanceError] = useState(&quot;&quot;);&#10;&#10;    useEffect(() =&gt; {&#10;        async function checkAdmin() {&#10;            const { data: { user } } = await supabase.auth.getUser();&#10;            if (!user) {&#10;                setAuthorized(false);&#10;                return;&#10;            }&#10;            const { data, error } = await supabase&#10;                .from('users')&#10;                .select('role')&#10;                .eq('id', user.id)&#10;                .single();&#10;            setAuthorized(data?.role === 'ADMIN');&#10;        }&#10;        checkAdmin();&#10;    }, []);&#10;&#10;    useEffect(() =&gt; {&#10;        async function fetchMaintenance() {&#10;            setMaintenanceLoading(true);&#10;            setMaintenanceError(&quot;&quot;);&#10;            const { data, error } = await supabase&#10;                .from('maintenance_requests')&#10;                .select('id, tenant_id, suite_id, description, status, created_at, resolved_at')&#10;                .order('created_at', { ascending: false });&#10;            if (error) setMaintenanceError(error.message);&#10;            setMaintenance(data || []);&#10;            setMaintenanceLoading(false);&#10;        }&#10;        if (authorized) fetchMaintenance();&#10;    }, [authorized]);&#10;&#10;    async function updateStatus(id: string, status: string) {&#10;        await supabase.from('maintenance_requests').update({ status, resolved_at: status === 'RESOLVED' ? new Date().toISOString() : null }).eq('id', id);&#10;        setMaintenance((prev) =&gt; prev.map((req) =&gt; req.id === id ? { ...req, status, resolved_at: status === 'RESOLVED' ? new Date().toISOString() : null } : req));&#10;    }&#10;&#10;    if (authorized === null) {&#10;        return &lt;div className=&quot;text-white&quot;&gt;Loading...&lt;/div&gt;;&#10;    }&#10;    if (!authorized) {&#10;        return &lt;div className=&quot;flex min-h-svh w-full items-center justify-center p-6 md:p-10 bg-[#2f2f38] text-white&quot;&gt;&#10;            Unauthorized access: You must be an admin to view this page.&#10;        &lt;/div&gt;;&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;min-h-screen w-full bg-[#181820] flex flex-col items-center py-12 px-4&quot;&gt;&#10;            &lt;div className=&quot;w-full max-w-6xl mx-auto&quot;&gt;&#10;                &lt;h1 className=&quot;text-3xl font-extrabold mb-8 text-center text-purple-400 drop-shadow&quot;&gt;Maintenance Requests&lt;/h1&gt;&#10;                &lt;div className=&quot;bg-[#23232b] p-8 rounded-2xl shadow-xl border border-purple-900/30&quot;&gt;&#10;                    {maintenanceLoading ? (&#10;                        &lt;div className=&quot;text-purple-200&quot;&gt;Loading...&lt;/div&gt;&#10;                    ) : maintenanceError ? (&#10;                        &lt;div className=&quot;text-red-400&quot;&gt;{maintenanceError}&lt;/div&gt;&#10;                    ) : maintenance.length === 0 ? (&#10;                        &lt;div className=&quot;text-gray-400&quot;&gt;No maintenance requests found.&lt;/div&gt;&#10;                    ) : (&#10;                        &lt;div className=&quot;overflow-x-auto custom-scrollbar rounded-xl&quot;&gt;&#10;                            &lt;table className=&quot;min-w-full divide-y divide-purple-900/30 text-base&quot;&gt;&#10;                                &lt;thead className=&quot;bg-[#23232b]&quot;&gt;&#10;                                    &lt;tr&gt;&#10;                                        &lt;th className=&quot;px-6 py-3 text-left text-xs font-bold text-purple-300 uppercase tracking-wider&quot;&gt;Tenant&lt;/th&gt;&#10;                                        &lt;th className=&quot;px-6 py-3 text-left text-xs font-bold text-purple-300 uppercase tracking-wider&quot;&gt;Suite&lt;/th&gt;&#10;                                        &lt;th className=&quot;px-6 py-3 text-left text-xs font-bold text-purple-300 uppercase tracking-wider&quot;&gt;Description&lt;/th&gt;&#10;                                        &lt;th className=&quot;px-6 py-3 text-left text-xs font-bold text-purple-300 uppercase tracking-wider&quot;&gt;Status&lt;/th&gt;&#10;                                        &lt;th className=&quot;px-6 py-3 text-left text-xs font-bold text-purple-300 uppercase tracking-wider&quot;&gt;Created&lt;/th&gt;&#10;                                        &lt;th className=&quot;px-6 py-3 text-left text-xs font-bold text-purple-300 uppercase tracking-wider&quot;&gt;Actions&lt;/th&gt;&#10;                                    &lt;/tr&gt;&#10;                                &lt;/thead&gt;&#10;                                &lt;tbody className=&quot;bg-[#181820] divide-y divide-purple-900/30&quot;&gt;&#10;                                    {maintenance.map((req) =&gt; (&#10;                                        &lt;tr key={req.id} className=&quot;hover:bg-purple-900/10 transition-colors&quot;&gt;&#10;                                            &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-purple-200 font-semibold&quot;&gt;{req.tenant_id}&lt;/td&gt;&#10;                                            &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-purple-200 font-semibold&quot;&gt;{req.suite_id}&lt;/td&gt;&#10;                                            &lt;td className=&quot;px-6 py-4 whitespace-nowrap max-w-xs truncate text-gray-100&quot; title={req.description}&gt;{req.description}&lt;/td&gt;&#10;                                            &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                                                &lt;span className={&#10;                                                    req.status === 'OPEN' ? 'text-yellow-400 font-bold' :&#10;                                                    req.status === 'IN_PROGRESS' ? 'text-blue-400 font-bold' :&#10;                                                    req.status === 'RESOLVED' ? 'text-green-400 font-bold' : 'text-gray-400'&#10;                                                }&gt;{req.status}&lt;/span&gt;&#10;                                            &lt;/td&gt;&#10;                                            &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-gray-400&quot;&gt;{new Date(req.created_at).toLocaleString()}&lt;/td&gt;&#10;                                            &lt;td className=&quot;px-6 py-4 whitespace-nowrap flex gap-2&quot;&gt;&#10;                                                {req.status !== 'RESOLVED' &amp;&amp; (&#10;                                                    &lt;Button size=&quot;sm&quot; className=&quot;bg-blue-700 hover:bg-blue-800 text-white px-3 py-1 rounded shadow&quot; onClick={() =&gt; updateStatus(req.id, req.status === 'OPEN' ? 'IN_PROGRESS' : 'RESOLVED')}&gt;&#10;                                                        {req.status === 'OPEN' ? 'Mark In Progress' : 'Mark Resolved'}&#10;                                                    &lt;/Button&gt;&#10;                                                )}&#10;                                            &lt;/td&gt;&#10;                                        &lt;/tr&gt;&#10;                                    ))}&#10;                                &lt;/tbody&gt;&#10;                            &lt;/table&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;style jsx global&gt;{`&#10;                .custom-scrollbar::-webkit-scrollbar {&#10;                    height: 10px;&#10;                    background: #23232b;&#10;                    border-radius: 8px;&#10;                }&#10;                .custom-scrollbar::-webkit-scrollbar-thumb {&#10;                    background: #6d28d9;&#10;                    border-radius: 8px;&#10;                }&#10;                .custom-scrollbar {&#10;                    scrollbar-color: #6d28d9 #23232b;&#10;                    scrollbar-width: thin;&#10;                }&#10;            `}&lt;/style&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/admin/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/page.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, { useEffect, useState } from 'react'&#10;import { supabase } from '@/app/lib/supabase/client';&#10;import { Button } from '@/components/ui/button';&#10;&#10;const isUserAdmin = async (userId: string): Promise&lt;boolean&gt; =&gt; {&#10;    if (!userId) {&#10;        console.error('No userId provided');&#10;        return false;&#10;    }&#10;    const { data, error } = await supabase&#10;        .from('users')&#10;        .select('role')&#10;        .eq('id', userId)&#10;        .single();&#10;&#10;    if (error) {&#10;        console.error('Error fetching user role:', error);&#10;        return false;&#10;    }&#10;    return data?.role === 'ADMIN';&#10;}&#10;&#10;const Page = () =&gt; {&#10;    const [authorized, setAuthorized] = useState&lt;boolean | null&gt;(null);&#10;    const [stats, setStats] = useState({ tenants: 0, suites: 0, tenancies: 0 });&#10;    const [maintenance, setMaintenance] = useState&lt;any[]&gt;([]);&#10;    const [maintenanceLoading, setMaintenanceLoading] = useState(true);&#10;    const [maintenanceError, setMaintenanceError] = useState(&quot;&quot;);&#10;&#10;    useEffect(() =&gt; {&#10;        async function checkAdmin() {&#10;            const { data: { user } } = await supabase.auth.getUser();&#10;            if (!user) {&#10;                setAuthorized(false);&#10;                return;&#10;            }&#10;            const isAdmin = await isUserAdmin(user.id);&#10;            setAuthorized(isAdmin);&#10;        }&#10;        checkAdmin();&#10;    }, []);&#10;&#10;    useEffect(() =&gt; {&#10;        async function fetchStats() {&#10;            const [{ count: tenants }, { count: suites }, { count: tenancies }] = await Promise.all([&#10;                supabase.from('users').select('id', { count: 'exact', head: true }),&#10;                supabase.from('suites').select('id', { count: 'exact', head: true }),&#10;                supabase.from('tenancies').select('id', { count: 'exact', head: true }).eq('active', true),&#10;            ]);&#10;            setStats({ tenants: tenants || 0, suites: suites || 0, tenancies: tenancies || 0 });&#10;        }&#10;        if (authorized) fetchStats();&#10;    }, [authorized]);&#10;&#10;    useEffect(() =&gt; {&#10;        async function fetchMaintenance() {&#10;            setMaintenanceLoading(true);&#10;            setMaintenanceError(&quot;&quot;);&#10;            const { data, error } = await supabase&#10;                .from('maintenance_requests')&#10;                .select('id, tenant_id, suite_id, description, status, created_at, resolved_at')&#10;                .order('created_at', { ascending: false });&#10;            if (error) setMaintenanceError(error.message);&#10;            setMaintenance(data || []);&#10;            setMaintenanceLoading(false);&#10;        }&#10;        if (authorized) fetchMaintenance();&#10;    }, [authorized]);&#10;&#10;    async function updateStatus(id: string, status: string) {&#10;        await supabase.from('maintenance_requests').update({ status, resolved_at: status === 'RESOLVED' ? new Date().toISOString() : null }).eq('id', id);&#10;        setMaintenance((prev) =&gt; prev.map((req) =&gt; req.id === id ? { ...req, status, resolved_at: status === 'RESOLVED' ? new Date().toISOString() : null } : req));&#10;    }&#10;&#10;    if (authorized === null) {&#10;        return &lt;div className=&quot;text-white&quot;&gt;Loading...&lt;/div&gt;;&#10;    }&#10;&#10;    if (!authorized) {&#10;        return &lt;div className=&quot;flex min-h-svh w-full items-center justify-center p-6 md:p-10 bg-[#2f2f38] text-white&quot;&gt;&#10;            Unauthorized access: You must be an admin to view this page.&#10;        &lt;/div&gt;;&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;fixed inset-0 min-h-screen w-full bg-[#181820] flex&quot;&gt;&#10;            {/* Sidebar */}&#10;            &lt;aside className=&quot;w-64 bg-[#23232b] border-r border-purple-900/30 flex-shrink-0 flex flex-col h-full z-40&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-center h-20 px-6 border-b border-purple-900/30&quot;&gt;&#10;                    &lt;span className=&quot;text-xl font-extrabold text-purple-400 tracking-wide&quot;&gt;Admin&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;nav className=&quot;flex flex-col gap-2 mt-8 px-4&quot;&gt;&#10;                    &lt;a href=&quot;/admin&quot; className=&quot;px-4 py-2 rounded-lg text-purple-200 bg-purple-900/30 font-semibold mb-1&quot;&gt;Dashboard&lt;/a&gt;&#10;                    &lt;a href=&quot;/admin/tenants&quot; className=&quot;px-4 py-2 rounded-lg text-gray-400 hover:bg-purple-900/20 hover:text-purple-200 transition&quot;&gt;Tenants&lt;/a&gt;&#10;                    &lt;a href=&quot;/admin/suites&quot; className=&quot;px-4 py-2 rounded-lg text-gray-400 hover:bg-purple-900/20 hover:text-purple-200 transition&quot;&gt;Suites&lt;/a&gt;&#10;                &lt;/nav&gt;&#10;            &lt;/aside&gt;&#10;            {/* Main Content */}&#10;            &lt;main className=&quot;flex-1 flex flex-col items-center justify-start w-full min-h-screen overflow-y-auto&quot;&gt;&#10;                &lt;div className=&quot;w-full max-w-6xl mt-10 mb-20 px-2&quot;&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-extrabold mb-8 text-center text-purple-400 drop-shadow&quot;&gt;Admin Dashboard&lt;/h1&gt;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-6 mb-12&quot;&gt;&#10;                        &lt;div className=&quot;bg-[#23232b] rounded-xl shadow p-6 border border-purple-900/30 flex flex-col items-center&quot;&gt;&#10;                            &lt;span className=&quot;text-4xl font-bold text-purple-300&quot;&gt;{stats.tenants}&lt;/span&gt;&#10;                            &lt;span className=&quot;text-gray-400 mt-2&quot;&gt;Tenants&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;bg-[#23232b] rounded-xl shadow p-6 border border-purple-900/30 flex flex-col items-center&quot;&gt;&#10;                            &lt;span className=&quot;text-4xl font-bold text-purple-300&quot;&gt;{stats.suites}&lt;/span&gt;&#10;                            &lt;span className=&quot;text-gray-400 mt-2&quot;&gt;Suites&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;bg-[#23232b] rounded-xl shadow p-6 border border-purple-900/30 flex flex-col items-center&quot;&gt;&#10;                            &lt;span className=&quot;text-4xl font-bold text-purple-300&quot;&gt;{stats.tenancies}&lt;/span&gt;&#10;                            &lt;span className=&quot;text-gray-400 mt-2&quot;&gt;Active Tenancies&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;bg-[#23232b] p-8 rounded-xl shadow border border-purple-900/30&quot;&gt;&#10;                        &lt;h2 className=&quot;text-xl font-semibold mb-4 text-purple-300&quot;&gt;Admin Actions&lt;/h2&gt;&#10;                        &lt;ul className=&quot;list-disc list-inside text-gray-400 mb-4&quot;&gt;&#10;                            &lt;li&gt;Manage Tenants and Suites&lt;/li&gt;&#10;                            &lt;li&gt;View Analytics (coming soon)&lt;/li&gt;&#10;                            &lt;li&gt;Configure Settings (coming soon)&lt;/li&gt;&#10;                            &lt;li&gt;Access Logs (coming soon)&lt;/li&gt;&#10;                        &lt;/ul&gt;&#10;                        &lt;p className=&quot;mt-4 text-gray-500&quot;&gt;For more information, please refer to the documentation or contact support.&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;bg-[#23232b] p-8 rounded-xl shadow border border-purple-900/30 mt-12&quot;&gt;&#10;                        &lt;h2 className=&quot;text-xl font-semibold mb-6 text-purple-300&quot;&gt;Maintenance Requests&lt;/h2&gt;&#10;                        {maintenanceLoading ? (&#10;                            &lt;div className=&quot;text-gray-400&quot;&gt;Loading...&lt;/div&gt;&#10;                        ) : maintenanceError ? (&#10;                            &lt;div className=&quot;text-red-400&quot;&gt;{maintenanceError}&lt;/div&gt;&#10;                        ) : maintenance.length === 0 ? (&#10;                            &lt;div className=&quot;text-gray-400&quot;&gt;No maintenance requests found.&lt;/div&gt;&#10;                        ) : (&#10;                            &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;                                &lt;table className=&quot;min-w-full divide-y divide-purple-900/30&quot;&gt;&#10;                                    &lt;thead className=&quot;bg-[#23232b]&quot;&gt;&#10;                                        &lt;tr&gt;&#10;                                            &lt;th className=&quot;px-4 py-2 text-left text-xs font-medium text-purple-300 uppercase&quot;&gt;Tenant&lt;/th&gt;&#10;                                            &lt;th className=&quot;px-4 py-2 text-left text-xs font-medium text-purple-300 uppercase&quot;&gt;Suite&lt;/th&gt;&#10;                                            &lt;th className=&quot;px-4 py-2 text-left text-xs font-medium text-purple-300 uppercase&quot;&gt;Description&lt;/th&gt;&#10;                                            &lt;th className=&quot;px-4 py-2 text-left text-xs font-medium text-purple-300 uppercase&quot;&gt;Status&lt;/th&gt;&#10;                                            &lt;th className=&quot;px-4 py-2 text-left text-xs font-medium text-purple-300 uppercase&quot;&gt;Created&lt;/th&gt;&#10;                                            &lt;th className=&quot;px-4 py-2 text-left text-xs font-medium text-purple-300 uppercase&quot;&gt;Actions&lt;/th&gt;&#10;                                        &lt;/tr&gt;&#10;                                    &lt;/thead&gt;&#10;                                    &lt;tbody className=&quot;bg-[#181820] divide-y divide-purple-900/30&quot;&gt;&#10;                                        {maintenance.map((req) =&gt; (&#10;                                            &lt;tr key={req.id} className=&quot;hover:bg-purple-900/10 transition-colors&quot;&gt;&#10;                                                &lt;td className=&quot;px-4 py-2 whitespace-nowrap&quot;&gt;{req.tenant_id}&lt;/td&gt;&#10;                                                &lt;td className=&quot;px-4 py-2 whitespace-nowrap&quot;&gt;{req.suite_id}&lt;/td&gt;&#10;                                                &lt;td className=&quot;px-4 py-2 whitespace-nowrap max-w-xs truncate&quot; title={req.description}&gt;{req.description}&lt;/td&gt;&#10;                                                &lt;td className=&quot;px-4 py-2 whitespace-nowrap&quot;&gt;&#10;                                                    &lt;span className={&#10;                                                        req.status === 'OPEN' ? 'text-yellow-400' :&#10;                                                        req.status === 'IN_PROGRESS' ? 'text-blue-400' :&#10;                                                        req.status === 'RESOLVED' ? 'text-green-400' : 'text-gray-400'&#10;                                                    }&gt;{req.status}&lt;/span&gt;&#10;                                                &lt;/td&gt;&#10;                                                &lt;td className=&quot;px-4 py-2 whitespace-nowrap text-gray-400&quot;&gt;{new Date(req.created_at).toLocaleString()}&lt;/td&gt;&#10;                                                &lt;td className=&quot;px-4 py-2 whitespace-nowrap flex gap-2&quot;&gt;&#10;                                                    {req.status !== 'RESOLVED' &amp;&amp; (&#10;                                                        &lt;Button size=&quot;sm&quot; className=&quot;bg-blue-700 hover:bg-blue-800 text-white px-3 py-1 rounded&quot; onClick={() =&gt; updateStatus(req.id, req.status === 'OPEN' ? 'IN_PROGRESS' : 'RESOLVED')}&gt;&#10;                                                            {req.status === 'OPEN' ? 'Mark In Progress' : 'Mark Resolved'}&#10;                                                        &lt;/Button&gt;&#10;                                                    )}&#10;                                                &lt;/td&gt;&#10;                                            &lt;/tr&gt;&#10;                                        ))}&#10;                                    &lt;/tbody&gt;&#10;                                &lt;/table&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/main&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export default Page;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useEffect, useState } from 'react'&#10;import { supabase } from '@/app/lib/supabase/client';&#10;&#10;const isUserAdmin = async (userId: string): Promise&lt;boolean&gt; =&gt; {&#10;    if (!userId) {&#10;        console.error('No userId provided');&#10;        return false;&#10;    }&#10;    const { data, error } = await supabase&#10;        .from('users')&#10;        .select('role')&#10;        .eq('id', userId)&#10;        .single();&#10;&#10;    if (error) {&#10;        console.error('Error fetching user role:', error);&#10;        return false;&#10;    }&#10;    return data?.role === 'ADMIN';&#10;}&#10;&#10;const Page = () =&gt; {&#10;    const [authorized, setAuthorized] = useState&lt;boolean | null&gt;(null);&#10;    const [stats, setStats] = useState({ tenants: 0, suites: 0, tenancies: 0 });&#10;&#10;    useEffect(() =&gt; {&#10;        async function checkAdmin() {&#10;            const { data: { user } } = await supabase.auth.getUser();&#10;            if (!user) {&#10;                setAuthorized(false);&#10;                return;&#10;            }&#10;            const isAdmin = await isUserAdmin(user.id);&#10;            setAuthorized(isAdmin);&#10;        }&#10;        checkAdmin();&#10;    }, []);&#10;&#10;    useEffect(() =&gt; {&#10;        async function fetchStats() {&#10;            const [{ count: tenants }, { count: suites }, { count: tenancies }] = await Promise.all([&#10;                supabase.from('users').select('id', { count: 'exact', head: true }),&#10;                supabase.from('suites').select('id', { count: 'exact', head: true }),&#10;                supabase.from('tenancies').select('id', { count: 'exact', head: true }).eq('active', true),&#10;            ]);&#10;            setStats({ tenants: tenants || 0, suites: suites || 0, tenancies: tenancies || 0 });&#10;        }&#10;        if (authorized) fetchStats();&#10;    }, [authorized]);&#10;&#10;    if (authorized === null) {&#10;        return &lt;div className=&quot;text-white&quot;&gt;Loading...&lt;/div&gt;;&#10;    }&#10;&#10;    if (!authorized) {&#10;        return &lt;div className=&quot;flex min-h-svh w-full items-center justify-center p-6 md:p-10 bg-[#2f2f38] text-white&quot;&gt;&#10;            Unauthorized access: You must be an admin to view this page.&#10;        &lt;/div&gt;;&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;fixed inset-0 min-h-screen w-full bg-[#181820] flex&quot;&gt;&#10;            {/* Sidebar */}&#10;            &lt;aside className=&quot;w-64 bg-[#23232b] border-r border-purple-900/30 flex-shrink-0 flex flex-col h-full z-40&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-center h-20 px-6 border-b border-purple-900/30&quot;&gt;&#10;                    &lt;span className=&quot;text-xl font-extrabold text-purple-400 tracking-wide&quot;&gt;Admin&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;nav className=&quot;flex flex-col gap-2 mt-8 px-4&quot;&gt;&#10;                    &lt;a href=&quot;/admin&quot; className=&quot;px-4 py-2 rounded-lg text-purple-200 bg-purple-900/30 font-semibold mb-1&quot;&gt;Dashboard&lt;/a&gt;&#10;                    &lt;a href=&quot;/admin/tenants&quot; className=&quot;px-4 py-2 rounded-lg text-gray-400 hover:bg-purple-900/20 hover:text-purple-200 transition&quot;&gt;Tenants&lt;/a&gt;&#10;                    &lt;a href=&quot;/admin/suites&quot; className=&quot;px-4 py-2 rounded-lg text-gray-400 hover:bg-purple-900/20 hover:text-purple-200 transition&quot;&gt;Suites&lt;/a&gt;&#10;                    &lt;a href=&quot;/admin/maintenance&quot; className=&quot;px-4 py-2 rounded-lg text-gray-400 hover:bg-purple-900/20 hover:text-purple-200 transition&quot;&gt;Maintenance&lt;/a&gt;&#10;                &lt;/nav&gt;&#10;            &lt;/aside&gt;&#10;            {/* Main Content */}&#10;            &lt;main className=&quot;flex-1 flex flex-col items-center justify-start w-full min-h-screen overflow-y-auto&quot;&gt;&#10;                &lt;div className=&quot;w-full max-w-6xl mt-10 mb-20 px-2&quot;&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-extrabold mb-8 text-center text-purple-400 drop-shadow&quot;&gt;Admin Dashboard&lt;/h1&gt;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-6 mb-12&quot;&gt;&#10;                        &lt;div className=&quot;bg-[#23232b] rounded-xl shadow p-6 border border-purple-900/30 flex flex-col items-center&quot;&gt;&#10;                            &lt;span className=&quot;text-4xl font-bold text-purple-300&quot;&gt;{stats.tenants}&lt;/span&gt;&#10;                            &lt;span className=&quot;text-gray-400 mt-2&quot;&gt;Tenants&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;bg-[#23232b] rounded-xl shadow p-6 border border-purple-900/30 flex flex-col items-center&quot;&gt;&#10;                            &lt;span className=&quot;text-4xl font-bold text-purple-300&quot;&gt;{stats.suites}&lt;/span&gt;&#10;                            &lt;span className=&quot;text-gray-400 mt-2&quot;&gt;Suites&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;bg-[#23232b] rounded-xl shadow p-6 border border-purple-900/30 flex flex-col items-center&quot;&gt;&#10;                            &lt;span className=&quot;text-4xl font-bold text-purple-300&quot;&gt;{stats.tenancies}&lt;/span&gt;&#10;                            &lt;span className=&quot;text-gray-400 mt-2&quot;&gt;Active Tenancies&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;bg-[#23232b] p-8 rounded-xl shadow border border-purple-900/30&quot;&gt;&#10;                        &lt;h2 className=&quot;text-xl font-semibold mb-4 text-purple-300&quot;&gt;Admin Actions&lt;/h2&gt;&#10;                        &lt;ul className=&quot;list-disc list-inside text-gray-400 mb-4&quot;&gt;&#10;                            &lt;li&gt;Manage Tenants and Suites&lt;/li&gt;&#10;                            &lt;li&gt;View Analytics (coming soon)&lt;/li&gt;&#10;                            &lt;li&gt;Configure Settings (coming soon)&lt;/li&gt;&#10;                            &lt;li&gt;Access Logs (coming soon)&lt;/li&gt;&#10;                        &lt;/ul&gt;&#10;                        &lt;p className=&quot;mt-4 text-gray-500&quot;&gt;For more information, please refer to the documentation or contact support.&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/main&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export default Page;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/admin/suites/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/suites/page.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, { useEffect, useState } from &quot;react&quot;;&#10;import { supabase } from &quot;@/app/lib/supabase/client&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;&#10;type Suite = {&#10;    id: string;&#10;    suite_number: string;&#10;    size_sqft?: number;&#10;    price_monthly?: number;&#10;    features?: string[];&#10;    is_available?: boolean;&#10;    photo_urls?: string[];&#10;    created_at?: string;&#10;};&#10;&#10;export default function Page() {&#10;    const [suites, setSuites] = useState&lt;Suite[]&gt;([]);&#10;    const [loading, setLoading] = useState(true);&#10;    const [form, setForm] = useState({&#10;        suite_number: &quot;&quot;,&#10;        size_sqft: &quot;&quot;,&#10;        price_monthly: &quot;&quot;,&#10;        features: &quot;&quot;,&#10;        is_available: true,&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        const fetchSuites = async () =&gt; {&#10;            const { data, error } = await supabase.from(&quot;suites&quot;).select(&quot;*&quot;);&#10;            if (!error &amp;&amp; data) setSuites(data);&#10;            setLoading(false);&#10;        };&#10;        fetchSuites();&#10;    }, []);&#10;&#10;    const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        const { name, value, type, checked } = e.target;&#10;        setForm((prev) =&gt; ({&#10;            ...prev,&#10;            [name]: type === &quot;checkbox&quot; ? checked : value,&#10;        }));&#10;    };&#10;&#10;    const handleCreate = async (e: React.FormEvent) =&gt; {&#10;        e.preventDefault();&#10;        const newSuite = {&#10;            suite_number: form.suite_number,&#10;            size_sqft: form.size_sqft ? parseInt(form.size_sqft) : null,&#10;            price_monthly: form.price_monthly ? parseFloat(form.price_monthly) : null,&#10;            features: form.features ? form.features.split(&quot;,&quot;).map(f =&gt; f.trim()) : [],&#10;            is_available: form.is_available,&#10;        };&#10;        const { data, error } = await supabase.from(&quot;suites&quot;).insert([newSuite]).select();&#10;        if (!error &amp;&amp; data &amp;&amp; data.length &gt; 0) {&#10;            setSuites((prev) =&gt; [...prev, data[0]]);&#10;            setForm({&#10;                suite_number: &quot;&quot;,&#10;                size_sqft: &quot;&quot;,&#10;                price_monthly: &quot;&quot;,&#10;                features: &quot;&quot;,&#10;                is_available: true,&#10;            });&#10;        }&#10;    };&#10;&#10;    const handleDelete = async (id: string) =&gt; {&#10;        await supabase.from(&quot;suites&quot;).delete().eq(&quot;id&quot;, id);&#10;        setSuites((prev) =&gt; prev.filter((suite) =&gt; suite.id !== id));&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;p-8&quot;&gt;&#10;            &lt;h1 className=&quot;text-2xl mb-4&quot;&gt;Suites Manager&lt;/h1&gt;&#10;            &lt;form className=&quot;mb-6 flex gap-2 items-end&quot; onSubmit={handleCreate}&gt;&#10;                &lt;input&#10;                    name=&quot;suite_number&quot;&#10;                    placeholder=&quot;Suite #&quot;&#10;                    value={form.suite_number}&#10;                    onChange={handleChange}&#10;                    required&#10;                    className=&quot;border px-2 py-1&quot;&#10;                /&gt;&#10;                &lt;input&#10;                    name=&quot;size_sqft&quot;&#10;                    placeholder=&quot;Size (sqft)&quot;&#10;                    value={form.size_sqft}&#10;                    onChange={handleChange}&#10;                    type=&quot;number&quot;&#10;                    className=&quot;border px-2 py-1&quot;&#10;                /&gt;&#10;                &lt;input&#10;                    name=&quot;price_monthly&quot;&#10;                    placeholder=&quot;Price ($/mo)&quot;&#10;                    value={form.price_monthly}&#10;                    onChange={handleChange}&#10;                    type=&quot;number&quot;&#10;                    step=&quot;0.01&quot;&#10;                    className=&quot;border px-2 py-1&quot;&#10;                /&gt;&#10;                &lt;input&#10;                    name=&quot;features&quot;&#10;                    placeholder=&quot;Features (comma separated)&quot;&#10;                    value={form.features}&#10;                    onChange={handleChange}&#10;                    className=&quot;border px-2 py-1&quot;&#10;                /&gt;&#10;                &lt;label className=&quot;flex items-center gap-1&quot;&gt;&#10;                    &lt;input&#10;                        name=&quot;is_available&quot;&#10;                        type=&quot;checkbox&quot;&#10;                        checked={form.is_available}&#10;                        onChange={handleChange}&#10;                    /&gt;&#10;                    Available&#10;                &lt;/label&gt;&#10;                &lt;Button type=&quot;submit&quot; size=&quot;sm&quot;&gt;Add Suite&lt;/Button&gt;&#10;            &lt;/form&gt;&#10;            {loading ? (&#10;                &lt;p&gt;Loading...&lt;/p&gt;&#10;            ) : (&#10;                &lt;table className=&quot;w-full border&quot;&gt;&#10;                    &lt;thead&gt;&#10;                    &lt;tr&gt;&#10;                        &lt;th className=&quot;border px-2 py-1&quot;&gt;Suite #&lt;/th&gt;&#10;                        &lt;th className=&quot;border px-2 py-1&quot;&gt;Size (sqft)&lt;/th&gt;&#10;                        &lt;th className=&quot;border px-2 py-1&quot;&gt;Price ($/mo)&lt;/th&gt;&#10;                        &lt;th className=&quot;border px-2 py-1&quot;&gt;Features&lt;/th&gt;&#10;                        &lt;th className=&quot;border px-2 py-1&quot;&gt;Available&lt;/th&gt;&#10;                        &lt;th className=&quot;border px-2 py-1&quot;&gt;Actions&lt;/th&gt;&#10;                    &lt;/tr&gt;&#10;                    &lt;/thead&gt;&#10;                    &lt;tbody&gt;&#10;                    {suites.map((suite) =&gt; (&#10;                        &lt;tr key={suite.id}&gt;&#10;                            &lt;td className=&quot;border px-2 py-1&quot;&gt;{suite.suite_number}&lt;/td&gt;&#10;                            &lt;td className=&quot;border px-2 py-1&quot;&gt;{suite.size_sqft ?? &quot;-&quot;}&lt;/td&gt;&#10;                            &lt;td className=&quot;border px-2 py-1&quot;&gt;{suite.price_monthly?.toFixed(2) ?? &quot;-&quot;}&lt;/td&gt;&#10;                            &lt;td className=&quot;border px-2 py-1&quot;&gt;{suite.features?.join(&quot;, &quot;) ?? &quot;-&quot;}&lt;/td&gt;&#10;                            &lt;td className=&quot;border px-2 py-1&quot;&gt;{suite.is_available ? &quot;Yes&quot; : &quot;No&quot;}&lt;/td&gt;&#10;                            &lt;td className=&quot;border px-2 py-1&quot;&gt;&#10;                                &lt;Button size=&quot;sm&quot; variant=&quot;outline&quot;&gt;Edit&lt;/Button&gt;&#10;                                &lt;Button&#10;                                    size=&quot;sm&quot;&#10;                                    variant=&quot;destructive&quot;&#10;                                    className=&quot;ml-2&quot;&#10;                                    onClick={() =&gt; handleDelete(suite.id)}&#10;                                &gt;&#10;                                    Delete&#10;                                &lt;/Button&gt;&#10;                            &lt;/td&gt;&#10;                        &lt;/tr&gt;&#10;                    ))}&#10;                    &lt;/tbody&gt;&#10;                &lt;/table&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import React, { useEffect, useState } from &quot;react&quot;;&#13;&#10;import { supabase } from &quot;@/app/lib/supabase/client&quot;;&#13;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#13;&#10;&#13;&#10;type Suite = {&#13;&#10;    id: string;&#13;&#10;    suite_number: string;&#13;&#10;    size_sqft?: number;&#13;&#10;    price_monthly?: number;&#13;&#10;    features?: string[];&#13;&#10;    is_available?: boolean;&#13;&#10;    photo_urls?: string[];&#13;&#10;    created_at?: string;&#13;&#10;};&#13;&#10;&#13;&#10;export default function Page() {&#13;&#10;    const [suites, setSuites] = useState&lt;Suite[]&gt;([]);&#13;&#10;    const [loading, setLoading] = useState(true);&#13;&#10;    const [form, setForm] = useState({&#13;&#10;        suite_number: &quot;&quot;,&#13;&#10;        size_sqft: &quot;&quot;,&#13;&#10;        price_monthly: &quot;&quot;,&#13;&#10;        features: &quot;&quot;,&#13;&#10;        is_available: true,&#13;&#10;    });&#13;&#10;&#13;&#10;    useEffect(() =&gt; {&#13;&#10;        const fetchSuites = async () =&gt; {&#13;&#10;            const { data, error } = await supabase.from(&quot;suites&quot;).select(&quot;*&quot;);&#13;&#10;            if (!error &amp;&amp; data) setSuites(data);&#13;&#10;            setLoading(false);&#13;&#10;        };&#13;&#10;        fetchSuites();&#13;&#10;    }, []);&#13;&#10;&#13;&#10;    const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#13;&#10;        const { name, value, type, checked } = e.target;&#13;&#10;        setForm((prev) =&gt; ({&#13;&#10;            ...prev,&#13;&#10;            [name]: type === &quot;checkbox&quot; ? checked : value,&#13;&#10;        }));&#13;&#10;    };&#13;&#10;&#13;&#10;    const handleCreate = async (e: React.FormEvent) =&gt; {&#13;&#10;        e.preventDefault();&#13;&#10;        const newSuite = {&#13;&#10;            suite_number: form.suite_number,&#13;&#10;            size_sqft: form.size_sqft ? parseInt(form.size_sqft) : null,&#13;&#10;            price_monthly: form.price_monthly ? parseFloat(form.price_monthly) : null,&#13;&#10;            features: form.features ? form.features.split(&quot;,&quot;).map(f =&gt; f.trim()) : [],&#13;&#10;            is_available: form.is_available,&#13;&#10;        };&#13;&#10;        const { data, error } = await supabase.from(&quot;suites&quot;).insert([newSuite]).select();&#13;&#10;        if (!error &amp;&amp; data &amp;&amp; data.length &gt; 0) {&#13;&#10;            setSuites((prev) =&gt; [...prev, data[0]]);&#13;&#10;            setForm({&#13;&#10;                suite_number: &quot;&quot;,&#13;&#10;                size_sqft: &quot;&quot;,&#13;&#10;                price_monthly: &quot;&quot;,&#13;&#10;                features: &quot;&quot;,&#13;&#10;                is_available: true,&#13;&#10;            });&#13;&#10;        }&#13;&#10;    };&#13;&#10;&#13;&#10;    const handleDelete = async (id: string) =&gt; {&#13;&#10;        await supabase.from(&quot;suites&quot;).delete().eq(&quot;id&quot;, id);&#13;&#10;        setSuites((prev) =&gt; prev.filter((suite) =&gt; suite.id !== id));&#13;&#10;    };&#13;&#10;&#13;&#10;    return (&#13;&#10;        &lt;div className=&quot;flex flex-col min-h-screen w-full bg-[#181820] text-gray-100&quot;&gt;&#13;&#10;            &lt;div className=&quot;flex-1 flex flex-col p-8 max-w-7xl w-full mx-auto&quot;&gt;&#13;&#10;                &lt;h1 className=&quot;text-3xl font-bold mb-8 text-purple-300&quot;&gt;Suites Manager&lt;/h1&gt;&#13;&#10;                &lt;div className=&quot;bg-[#23232b] rounded-xl shadow-lg p-6 mb-8 border border-purple-900/30&quot;&gt;&#13;&#10;                    &lt;form className=&quot;flex flex-col md:flex-row gap-4 items-end&quot; onSubmit={handleCreate}&gt;&#13;&#10;                        &lt;div className=&quot;flex flex-col w-full md:w-1/5&quot;&gt;&#13;&#10;                            &lt;label className=&quot;mb-1 text-sm text-purple-200&quot;&gt;Suite #&lt;/label&gt;&#13;&#10;                            &lt;input&#13;&#10;                                name=&quot;suite_number&quot;&#13;&#10;                                placeholder=&quot;Suite #&quot;&#13;&#10;                                value={form.suite_number}&#13;&#10;                                onChange={handleChange}&#13;&#10;                                required&#13;&#10;                                className=&quot;bg-[#181820] border border-purple-900/30 rounded px-3 py-2 text-gray-100 focus:outline-none focus:ring-2 focus:ring-purple-600&quot;&#13;&#10;                            /&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &lt;div className=&quot;flex flex-col w-full md:w-1/5&quot;&gt;&#13;&#10;                            &lt;label className=&quot;mb-1 text-sm text-purple-200&quot;&gt;Size (sqft)&lt;/label&gt;&#13;&#10;                            &lt;input&#13;&#10;                                name=&quot;size_sqft&quot;&#13;&#10;                                placeholder=&quot;Size (sqft)&quot;&#13;&#10;                                value={form.size_sqft}&#13;&#10;                                onChange={handleChange}&#13;&#10;                                type=&quot;number&quot;&#13;&#10;                                className=&quot;bg-[#181820] border border-purple-900/30 rounded px-3 py-2 text-gray-100 focus:outline-none focus:ring-2 focus:ring-purple-600&quot;&#13;&#10;                            /&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &lt;div className=&quot;flex flex-col w-full md:w-1/5&quot;&gt;&#13;&#10;                            &lt;label className=&quot;mb-1 text-sm text-purple-200&quot;&gt;Price ($/mo)&lt;/label&gt;&#13;&#10;                            &lt;input&#13;&#10;                                name=&quot;price_monthly&quot;&#13;&#10;                                placeholder=&quot;Price ($/mo)&quot;&#13;&#10;                                value={form.price_monthly}&#13;&#10;                                onChange={handleChange}&#13;&#10;                                type=&quot;number&quot;&#13;&#10;                                step=&quot;0.01&quot;&#13;&#10;                                className=&quot;bg-[#181820] border border-purple-900/30 rounded px-3 py-2 text-gray-100 focus:outline-none focus:ring-2 focus:ring-purple-600&quot;&#13;&#10;                            /&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &lt;div className=&quot;flex flex-col w-full md:w-1/5&quot;&gt;&#13;&#10;                            &lt;label className=&quot;mb-1 text-sm text-purple-200&quot;&gt;Features&lt;/label&gt;&#13;&#10;                            &lt;input&#13;&#10;                                name=&quot;features&quot;&#13;&#10;                                placeholder=&quot;Features (comma separated)&quot;&#13;&#10;                                value={form.features}&#13;&#10;                                onChange={handleChange}&#13;&#10;                                className=&quot;bg-[#181820] border border-purple-900/30 rounded px-3 py-2 text-gray-100 focus:outline-none focus:ring-2 focus:ring-purple-600&quot;&#13;&#10;                            /&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &lt;div className=&quot;flex flex-col w-full md:w-1/5&quot;&gt;&#13;&#10;                            &lt;label className=&quot;mb-1 text-sm text-purple-200&quot;&gt;Available&lt;/label&gt;&#13;&#10;                            &lt;label className=&quot;flex items-center gap-2&quot;&gt;&#13;&#10;                                &lt;input&#13;&#10;                                    name=&quot;is_available&quot;&#13;&#10;                                    type=&quot;checkbox&quot;&#13;&#10;                                    checked={form.is_available}&#13;&#10;                                    onChange={handleChange}&#13;&#10;                                    className=&quot;accent-purple-600 w-5 h-5&quot;&#13;&#10;                                /&gt;&#13;&#10;                                &lt;span className=&quot;text-purple-200&quot;&gt;Yes&lt;/span&gt;&#13;&#10;                            &lt;/label&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &lt;Button type=&quot;submit&quot; size=&quot;sm&quot; className=&quot;bg-gradient-to-r from-purple-700 to-purple-500 hover:from-purple-800 hover:to-purple-600 text-white font-bold px-6 py-2 rounded-lg shadow mt-4 md:mt-0&quot;&gt;Add Suite&lt;/Button&gt;&#13;&#10;                    &lt;/form&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;                {loading ? (&#13;&#10;                    &lt;p className=&quot;text-purple-200&quot;&gt;Loading...&lt;/p&gt;&#13;&#10;                ) : (&#13;&#10;                    &lt;div className=&quot;overflow-x-auto rounded-xl shadow-lg bg-[#23232b] border border-purple-900/30&quot;&gt;&#13;&#10;                        &lt;table className=&quot;min-w-full divide-y divide-purple-900/30&quot;&gt;&#13;&#10;                            &lt;thead className=&quot;bg-[#23232b]&quot;&gt;&#13;&#10;                                &lt;tr&gt;&#13;&#10;                                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-purple-300 uppercase tracking-wider&quot;&gt;Suite #&lt;/th&gt;&#13;&#10;                                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-purple-300 uppercase tracking-wider&quot;&gt;Size (sqft)&lt;/th&gt;&#13;&#10;                                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-purple-300 uppercase tracking-wider&quot;&gt;Price ($/mo)&lt;/th&gt;&#13;&#10;                                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-purple-300 uppercase tracking-wider&quot;&gt;Features&lt;/th&gt;&#13;&#10;                                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-purple-300 uppercase tracking-wider&quot;&gt;Available&lt;/th&gt;&#13;&#10;                                    &lt;th className=&quot;px-6 py-3&quot;&gt;&lt;/th&gt;&#13;&#10;                                &lt;/tr&gt;&#13;&#10;                            &lt;/thead&gt;&#13;&#10;                            &lt;tbody className=&quot;bg-[#181820] divide-y divide-purple-900/30&quot;&gt;&#13;&#10;                                {suites.map((suite) =&gt; (&#13;&#10;                                    &lt;tr key={suite.id} className=&quot;border-b border-purple-900/20 hover:bg-purple-900/10 transition-colors&quot;&gt;&#13;&#10;                                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;{suite.suite_number}&lt;/td&gt;&#13;&#10;                                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;{suite.size_sqft ?? &quot;-&quot;}&lt;/td&gt;&#13;&#10;                                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;{suite.price_monthly?.toFixed(2) ?? &quot;-&quot;}&lt;/td&gt;&#13;&#10;                                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;{suite.features?.join(&quot;, &quot;) ?? &quot;-&quot;}&lt;/td&gt;&#13;&#10;                                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#13;&#10;                                            &lt;span className={suite.is_available ? &quot;text-green-400&quot; : &quot;text-red-400&quot;}&gt;{suite.is_available ? &quot;Yes&quot; : &quot;No&quot;}&lt;/span&gt;&#13;&#10;                                        &lt;/td&gt;&#13;&#10;                                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap flex gap-2&quot;&gt;&#13;&#10;                                            &lt;Button size=&quot;sm&quot; variant=&quot;outline&quot; className=&quot;border-purple-700 text-purple-300&quot;&gt;Edit&lt;/Button&gt;&#13;&#10;                                            &lt;Button&#13;&#10;                                                size=&quot;sm&quot;&#13;&#10;                                                variant=&quot;destructive&quot;&#13;&#10;                                                className=&quot;ml-2 bg-gradient-to-r from-red-700 to-red-500 hover:from-red-800 hover:to-red-600 text-white font-bold px-4 py-2 rounded-lg shadow&quot;&#13;&#10;                                                onClick={() =&gt; handleDelete(suite.id)}&#13;&#10;                                            &gt;&#13;&#10;                                                Delete&#13;&#10;                                            &lt;/Button&gt;&#13;&#10;                                        &lt;/td&gt;&#13;&#10;                                    &lt;/tr&gt;&#13;&#10;                                ))}&#13;&#10;                            &lt;/tbody&gt;&#13;&#10;                        &lt;/table&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                )}&#13;&#10;            &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;    );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/admin/tenants/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/tenants/page.tsx" />
              <option name="originalContent" value="'use client';&#10;import React, { useEffect, useState } from &quot;react&quot;;&#10;import { supabase } from &quot;@/app/lib/supabase/client&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;&#10;type Tenant = {&#10;    id: string;&#10;    email: string;&#10;    name?: string;&#10;    created_at?: string;&#10;};&#10;&#10;type Tenancy = {&#10;    id: string;&#10;    tenant_id: string;&#10;    suite_id: string;&#10;    active?: boolean;&#10;    end_date?: string | null;&#10;};&#10;&#10;type Suite = {&#10;    id: string;&#10;    suite_number: string;&#10;    price_monthly?: number;&#10;};&#10;&#10;export default function TenantPage() {&#10;    const [tenants, setTenants] = useState&lt;Tenant[]&gt;([]);&#10;    const [tenancies, setTenancies] = useState&lt;Tenancy[]&gt;([]);&#10;    const [suites, setSuites] = useState&lt;Suite[]&gt;([]);&#10;    const [loading, setLoading] = useState(true);&#10;    const [form, setForm] = useState({email: &quot;&quot;, name: &quot;&quot;});&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;    // Add suite assignment state&#10;    const [assignments, setAssignments] = useState&lt;{[tenantId: string]: string}&gt;({});&#10;    const [saving, setSaving] = useState&lt;string | null&gt;(null);&#10;&#10;    useEffect(() =&gt; {&#10;        const fetchData = async () =&gt; {&#10;            setLoading(true);&#10;            const {data: tenantsData} = await supabase.from(&quot;users&quot;).select(&quot;id, email, name, created_at&quot;);&#10;            const {data: tenanciesData} = await supabase&#10;                .from(&quot;tenancies&quot;)&#10;                .select(&quot;id, tenant_id, suite_id, active, end_date&quot;)&#10;                .eq(&quot;active&quot;, true);&#10;            const {data: suitesData} = await supabase.from(&quot;suites&quot;).select(&quot;id, suite_number, price_monthly&quot;);&#10;            setTenants(tenantsData || []);&#10;            setTenancies(tenanciesData || []);&#10;            setSuites(suitesData || []);&#10;            setLoading(false);&#10;        };&#10;        fetchData();&#10;    }, []);&#10;&#10;    const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        const {name, value} = e.target;&#10;        setForm((prev) =&gt; ({...prev, [name]: value}));&#10;    };&#10;&#10;    const addTenant = async (e: React.FormEvent) =&gt; {&#10;        e.preventDefault();&#10;        setError(null);&#10;        if (!form.email) {&#10;            setError(&quot;Email is required.&quot;);&#10;            return;&#10;        }&#10;        const {data, error} = await supabase&#10;            .from(&quot;users&quot;)&#10;            .insert([{email: form.email, name: form.name}])&#10;            .select();&#10;        if (error) {&#10;            setError(error.message);&#10;        } else if (data &amp;&amp; data.length &gt; 0) {&#10;            setTenants((prev) =&gt; [...prev, data[0]]);&#10;            setForm({email: &quot;&quot;, name: &quot;&quot;});&#10;        }&#10;    };&#10;&#10;    const removeTenant = async (id: string) =&gt; {&#10;        setError(null);&#10;        const {error} = await supabase.from(&quot;users&quot;).delete().eq(&quot;id&quot;, id);&#10;        if (error) {&#10;            setError(error.message);&#10;        } else {&#10;            setTenants((prev) =&gt; prev.filter((tenant) =&gt; tenant.id !== id));&#10;        }&#10;    };&#10;&#10;    // Helper to get suite info for a tenant&#10;    const getSuiteInfo = (tenantId: string) =&gt; {&#10;        const tenancy = tenancies.find(&#10;            t =&gt; t.tenant_id === tenantId &amp;&amp; t.active &amp;&amp; (!t.end_date || new Date(t.end_date) &gt; new Date())&#10;        );&#10;        if (!tenancy) return {suiteNumber: &quot;-&quot;, price: &quot;-&quot;};&#10;        const suite = suites.find(s =&gt; s.id === tenancy.suite_id);&#10;        return {&#10;            suiteNumber: suite?.suite_number ?? &quot;-&quot;,&#10;            price: suite?.price_monthly?.toFixed(2) ?? &quot;-&quot;&#10;        };&#10;    };&#10;&#10;    // Helper to get current suite assignment&#10;    const getCurrentSuiteId = (tenantId: string) =&gt; {&#10;        const tenancy = tenancies.find(t =&gt; t.tenant_id === tenantId &amp;&amp; t.active);&#10;        return tenancy?.suite_id || &quot;&quot;;&#10;    };&#10;&#10;    // Handle suite selection change&#10;    const handleSuiteChange = (tenantId: string, suiteId: string) =&gt; {&#10;        setAssignments(prev =&gt; ({ ...prev, [tenantId]: suiteId }));&#10;    };&#10;&#10;    // Assign suite to tenant (create or update tenancy)&#10;    const handleAssignSuite = async (tenantId: string) =&gt; {&#10;        const suiteId = assignments[tenantId];&#10;        if (!suiteId) return;&#10;        setSaving(tenantId);&#10;        // End any existing active tenancy for this tenant&#10;        const existing = tenancies.find(t =&gt; t.tenant_id === tenantId &amp;&amp; t.active);&#10;        if (existing) {&#10;            await supabase&#10;                .from('tenancies')&#10;                .update({ active: false, end_date: new Date().toISOString().slice(0,10) })&#10;                .eq('id', existing.id);&#10;        }&#10;        // Create new tenancy&#10;        const { error } = await supabase&#10;            .from('tenancies')&#10;            .insert({&#10;                tenant_id: tenantId,&#10;                suite_id: suiteId,&#10;                start_date: new Date().toISOString().slice(0,10),&#10;                active: true&#10;            });&#10;        if (error) setError(error.message);&#10;        else setError(null);&#10;        setSaving(null);&#10;        // Refresh data&#10;        const {data: tenanciesData} = await supabase&#10;            .from(&quot;tenancies&quot;)&#10;            .select(&quot;id, tenant_id, suite_id, active, end_date&quot;)&#10;            .eq(&quot;active&quot;, true);&#10;        setTenancies(tenanciesData || []);&#10;    };&#10;&#10;    if (loading) return &lt;div className=&quot;p-8&quot;&gt;Loading...&lt;/div&gt;;&#10;    return (&#10;                                &lt;th className=&quot;px-6 py-3&quot;&gt;&lt;/th&gt;&#10;                            &lt;/tr&gt;&#10;                        &lt;/thead&gt;&#10;                        &lt;tbody className=&quot;bg-[#181820] divide-y divide-purple-900/30&quot;&gt;&#10;                            {tenants.map((tenant) =&gt; {&#10;                                const currentSuiteId = getCurrentSuiteId(tenant.id);&#10;                                return (&#10;                                    &lt;tr key={tenant.id} className=&quot;border-b border-purple-900/20 hover:bg-purple-900/10 transition-colors&quot;&gt;&#10;                                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;{tenant.name || tenant.id}&lt;/td&gt;&#10;                                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;{tenant.email}&lt;/td&gt;&#10;                                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                                            &lt;select&#10;                                                className=&quot;bg-[#23232b] border border-purple-900/30 rounded px-2 py-1 text-gray-100&quot;&#10;                                                value={assignments[tenant.id] || currentSuiteId || ''}&#10;                                                onChange={e =&gt; handleSuiteChange(tenant.id, e.target.value)}&#10;                                            &gt;&#10;                                                &lt;option value=&quot;&quot;&gt;Select suite&lt;/option&gt;&#10;                                                {suites.map(suite =&gt; (&#10;                                                    &lt;option key={suite.id} value={suite.id}&gt;{suite.suite_number}&lt;/option&gt;&#10;                                                ))}&#10;                                            &lt;/select&gt;&#10;                                        &lt;/td&gt;&#10;                                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                                            &lt;Button&#10;                                                onClick={() =&gt; handleAssignSuite(tenant.id)}&#10;                                                disabled={saving === tenant.id || !(assignments[tenant.id] &amp;&amp; assignments[tenant.id] !== currentSuiteId)}&#10;                                                className=&quot;bg-gradient-to-r from-purple-700 to-purple-500 hover:from-purple-800 hover:to-purple-600 text-white font-bold px-4 py-2 rounded-lg shadow disabled:opacity-60&quot;&#10;                                            &gt;&#10;                                                {saving === tenant.id ? 'Saving...' : 'Assign'}&#10;                                            &lt;/Button&gt;&#10;                                        &lt;/td&gt;&#10;                                    &lt;/tr&gt;&#10;                                );&#10;                            })}&#10;                        &lt;/tbody&gt;&#10;                    &lt;/table&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;import React, { useEffect, useState } from &quot;react&quot;;&#10;import { supabase } from &quot;@/app/lib/supabase/client&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;&#10;type Tenant = {&#10;    id: string;&#10;    email: string;&#10;    name?: string;&#10;    created_at?: string;&#10;};&#10;&#10;type Tenancy = {&#10;    id: string;&#10;    tenant_id: string;&#10;    suite_id: string;&#10;    active?: boolean;&#10;    end_date?: string | null;&#10;};&#10;&#10;type Suite = {&#10;    id: string;&#10;    suite_number: string;&#10;    price_monthly?: number;&#10;};&#10;&#10;export default function TenantPage() {&#10;    const [tenants, setTenants] = useState&lt;Tenant[]&gt;([]);&#10;    const [tenancies, setTenancies] = useState&lt;Tenancy[]&gt;([]);&#10;    const [suites, setSuites] = useState&lt;Suite[]&gt;([]);&#10;    const [loading, setLoading] = useState(true);&#10;    const [form, setForm] = useState({email: &quot;&quot;, name: &quot;&quot;});&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;    // Add suite assignment state&#10;    const [assignments, setAssignments] = useState&lt;{[tenantId: string]: string}&gt;({});&#10;    const [saving, setSaving] = useState&lt;string | null&gt;(null);&#10;&#10;    useEffect(() =&gt; {&#10;        const fetchData = async () =&gt; {&#10;            setLoading(true);&#10;            const {data: tenantsData} = await supabase.from(&quot;users&quot;).select(&quot;id, email, name, created_at&quot;);&#10;            const {data: tenanciesData} = await supabase&#10;                .from(&quot;tenancies&quot;)&#10;                .select(&quot;id, tenant_id, suite_id, active, end_date&quot;)&#10;                .eq(&quot;active&quot;, true);&#10;            const {data: suitesData} = await supabase.from(&quot;suites&quot;).select(&quot;id, suite_number, price_monthly&quot;);&#10;            setTenants(tenantsData || []);&#10;            setTenancies(tenanciesData || []);&#10;            setSuites(suitesData || []);&#10;            setLoading(false);&#10;        };&#10;        fetchData();&#10;    }, []);&#10;&#10;    const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        const {name, value} = e.target;&#10;        setForm((prev) =&gt; ({...prev, [name]: value}));&#10;    };&#10;&#10;    const addTenant = async (e: React.FormEvent) =&gt; {&#10;        e.preventDefault();&#10;        setError(null);&#10;        if (!form.email) {&#10;            setError(&quot;Email is required.&quot;);&#10;            return;&#10;        }&#10;        const {data, error} = await supabase&#10;            .from(&quot;users&quot;)&#10;            .insert([{email: form.email, name: form.name}])&#10;            .select();&#10;        if (error) {&#10;            setError(error.message);&#10;        } else if (data &amp;&amp; data.length &gt; 0) {&#10;            setTenants((prev) =&gt; [...prev, data[0]]);&#10;            setForm({email: &quot;&quot;, name: &quot;&quot;});&#10;        }&#10;    };&#10;&#10;    const removeTenant = async (id: string) =&gt; {&#10;        setError(null);&#10;        const {error} = await supabase.from(&quot;users&quot;).delete().eq(&quot;id&quot;, id);&#10;        if (error) {&#10;            setError(error.message);&#10;        } else {&#10;            setTenants((prev) =&gt; prev.filter((tenant) =&gt; tenant.id !== id));&#10;        }&#10;    };&#10;&#10;    // Helper to get suite info for a tenant&#10;    const getSuiteInfo = (tenantId: string) =&gt; {&#10;        const tenancy = tenancies.find(&#10;            t =&gt; t.tenant_id === tenantId &amp;&amp; t.active &amp;&amp; (!t.end_date || new Date(t.end_date) &gt; new Date())&#10;        );&#10;        if (!tenancy) return {suiteNumber: &quot;-&quot;, price: &quot;-&quot;};&#10;        const suite = suites.find(s =&gt; s.id === tenancy.suite_id);&#10;        return {&#10;            suiteNumber: suite?.suite_number ?? &quot;-&quot;,&#10;            price: suite?.price_monthly?.toFixed(2) ?? &quot;-&quot;&#10;        };&#10;    };&#10;&#10;    // Helper to get current suite assignment&#10;    const getCurrentSuiteId = (tenantId: string) =&gt; {&#10;        const tenancy = tenancies.find(t =&gt; t.tenant_id === tenantId &amp;&amp; t.active);&#10;        return tenancy?.suite_id || &quot;&quot;;&#10;    };&#10;&#10;    // Handle suite selection change&#10;    const handleSuiteChange = (tenantId: string, suiteId: string) =&gt; {&#10;        setAssignments(prev =&gt; ({ ...prev, [tenantId]: suiteId }));&#10;    };&#10;&#10;    // Assign suite to tenant (create or update tenancy)&#10;    const handleAssignSuite = async (tenantId: string) =&gt; {&#10;        const suiteId = assignments[tenantId];&#10;        if (!suiteId) return;&#10;        setSaving(tenantId);&#10;        // End any existing active tenancy for this tenant&#10;        const existing = tenancies.find(t =&gt; t.tenant_id === tenantId &amp;&amp; t.active);&#10;        if (existing) {&#10;            await supabase&#10;                .from('tenancies')&#10;                .update({ active: false, end_date: new Date().toISOString().slice(0,10) })&#10;                .eq('id', existing.id);&#10;        }&#10;        // Create new tenancy&#10;        const { error } = await supabase&#10;            .from('tenancies')&#10;            .insert({&#10;                tenant_id: tenantId,&#10;                suite_id: suiteId,&#10;                start_date: new Date().toISOString().slice(0,10),&#10;                active: true&#10;            });&#10;        if (error) setError(error.message);&#10;        else setError(null);&#10;        setSaving(null);&#10;        // Refresh data&#10;        const {data: tenanciesData} = await supabase&#10;            .from(&quot;tenancies&quot;)&#10;            .select(&quot;id, tenant_id, suite_id, active, end_date&quot;)&#10;            .eq(&quot;active&quot;, true);&#10;        setTenancies(tenanciesData || []);&#10;    };&#10;&#10;    if (loading) return &lt;div className=&quot;p-8&quot;&gt;Loading...&lt;/div&gt;;&#10;    return (&#10;        &lt;div className=&quot;flex flex-col min-h-screen w-full bg-[#181820] text-gray-100&quot;&gt;&#10;            &lt;div className=&quot;flex-1 flex flex-col p-8 max-w-7xl w-full mx-auto&quot;&gt;&#10;                &lt;h1 className=&quot;text-3xl font-bold mb-8 text-purple-300&quot;&gt;Tenants&lt;/h1&gt;&#10;                &lt;div className=&quot;bg-[#23232b] rounded-xl shadow-lg p-6 mb-8 border border-purple-900/30&quot;&gt;&#10;                    &lt;form className=&quot;flex flex-col md:flex-row gap-4 items-end&quot; onSubmit={addTenant}&gt;&#10;                        &lt;div className=&quot;flex flex-col w-full md:w-1/3&quot;&gt;&#10;                            &lt;label className=&quot;mb-1 text-sm text-purple-200&quot;&gt;Name&lt;/label&gt;&#10;                            &lt;input&#10;                                name=&quot;name&quot;&#10;                                placeholder=&quot;Name&quot;&#10;                                value={form.name}&#10;                                onChange={handleChange}&#10;                                className=&quot;bg-[#181820] border border-purple-900/30 rounded px-3 py-2 text-gray-100 focus:outline-none focus:ring-2 focus:ring-purple-600&quot;&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex flex-col w-full md:w-1/3&quot;&gt;&#10;                            &lt;label className=&quot;mb-1 text-sm text-purple-200&quot;&gt;Email&lt;/label&gt;&#10;                            &lt;input&#10;                                name=&quot;email&quot;&#10;                                placeholder=&quot;Email&quot;&#10;                                value={form.email}&#10;                                onChange={handleChange}&#10;                                required&#10;                                className=&quot;bg-[#181820] border border-purple-900/30 rounded px-3 py-2 text-gray-100 focus:outline-none focus:ring-2 focus:ring-purple-600&quot;&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;Button type=&quot;submit&quot; size=&quot;sm&quot; className=&quot;bg-gradient-to-r from-purple-700 to-purple-500 hover:from-purple-800 hover:to-purple-600 text-white font-bold px-6 py-2 rounded-lg shadow mt-4 md:mt-0&quot;&gt;&#10;                            Add Tenant&#10;                        &lt;/Button&gt;&#10;                    &lt;/form&gt;&#10;                    {error &amp;&amp; &lt;div className=&quot;text-red-400 mt-2&quot;&gt;{error}&lt;/div&gt;}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;overflow-x-auto rounded-xl shadow-lg bg-[#23232b] border border-purple-900/30&quot;&gt;&#10;                    &lt;table className=&quot;min-w-full divide-y divide-purple-900/30&quot;&gt;&#10;                        &lt;thead className=&quot;bg-[#23232b]&quot;&gt;&#10;                            &lt;tr&gt;&#10;                                &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-purple-300 uppercase tracking-wider&quot;&gt;Name&lt;/th&gt;&#10;                                &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-purple-300 uppercase tracking-wider&quot;&gt;Email&lt;/th&gt;&#10;                                &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-purple-300 uppercase tracking-wider&quot;&gt;Suite&lt;/th&gt;&#10;                                &lt;th className=&quot;px-6 py-3&quot;&gt;&lt;/th&gt;&#10;                            &lt;/tr&gt;&#10;                        &lt;/thead&gt;&#10;                        &lt;tbody className=&quot;bg-[#181820] divide-y divide-purple-900/30&quot;&gt;&#10;                            {tenants.map((tenant) =&gt; {&#10;                                const currentSuiteId = getCurrentSuiteId(tenant.id);&#10;                                return (&#10;                                    &lt;tr key={tenant.id} className=&quot;border-b border-purple-900/20 hover:bg-purple-900/10 transition-colors&quot;&gt;&#10;                                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;{tenant.name || tenant.id}&lt;/td&gt;&#10;                                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;{tenant.email}&lt;/td&gt;&#10;                                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                                            &lt;select&#10;                                                className=&quot;bg-[#23232b] border border-purple-900/30 rounded px-2 py-1 text-gray-100&quot;&#10;                                                value={assignments[tenant.id] || currentSuiteId || ''}&#10;                                                onChange={e =&gt; handleSuiteChange(tenant.id, e.target.value)}&#10;                                            &gt;&#10;                                                &lt;option value=&quot;&quot;&gt;Select suite&lt;/option&gt;&#10;                                                {suites.map(suite =&gt; (&#10;                                                    &lt;option key={suite.id} value={suite.id}&gt;{suite.suite_number}&lt;/option&gt;&#10;                                                ))}&#10;                                            &lt;/select&gt;&#10;                                        &lt;/td&gt;&#10;                                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                                            &lt;Button&#10;                                                onClick={() =&gt; handleAssignSuite(tenant.id)}&#10;                                                disabled={saving === tenant.id || !(assignments[tenant.id] &amp;&amp; assignments[tenant.id] !== currentSuiteId)}&#10;                                                className=&quot;bg-gradient-to-r from-purple-700 to-purple-500 hover:from-purple-800 hover:to-purple-600 text-white font-bold px-4 py-2 rounded-lg shadow disabled:opacity-60&quot;&#10;                                            &gt;&#10;                                                {saving === tenant.id ? 'Saving...' : 'Assign'}&#10;                                            &lt;/Button&gt;&#10;                                        &lt;/td&gt;&#10;                                    &lt;/tr&gt;&#10;                                );&#10;                            })}&#10;                        &lt;/tbody&gt;&#10;                    &lt;/table&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/tenant/maintenance/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/tenant/maintenance/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSearchParams } from &quot;next/navigation&quot;;&#10;import { Card } from &quot;@/components/ui/card&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import { supabase } from &quot;@/app/lib/supabase/client&quot;;&#10;&#10;export default function MaintenanceRequestForm() {&#10;    const searchParams = useSearchParams();&#10;    const suiteId = searchParams.get(&quot;suiteId&quot;) || &quot;&quot;;&#10;    const [tenantId, setTenantId] = useState(&quot;&quot;);&#10;&#10;    const [description, setDescription] = useState(&quot;&quot;);&#10;    const [loading, setLoading] = useState(false);&#10;    const [error, setError] = useState(&quot;&quot;);&#10;&#10;    useEffect(() =&gt; {&#10;        async function fetchUserId() {&#10;            const { data: { user } } = await supabase.auth.getUser();&#10;            if (user) setTenantId(user.id);&#10;        }&#10;        fetchUserId();&#10;    }, []);&#10;&#10;    // Show error if required params are missing&#10;    if (!tenantId || !suiteId) {&#10;        return (&#10;            &lt;div className=&quot;flex items-center justify-center min-h-screen bg-[#2f2f38]&quot;&gt;&#10;                &lt;div className=&quot;bg-[#23232b] p-8 rounded-2xl shadow-xl text-center&quot;&gt;&#10;                    &lt;h2 className=&quot;text-2xl font-bold text-red-400 mb-4&quot;&gt;Missing Required Information&lt;/h2&gt;&#10;                    &lt;p className=&quot;text-gray-200 mb-2&quot;&gt;This page requires both a tenant and suite to be specified.&lt;/p&gt;&#10;                    &lt;p className=&quot;text-gray-400 text-sm&quot;&gt;Please access this page from your dashboard or contact support if you believe this is an error.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    async function handleSubmit(e: React.FormEvent) {&#10;        e.preventDefault();&#10;        setError(&quot;&quot;);&#10;        setLoading(true);&#10;&#10;        const res = await fetch(&quot;/api/maintenance/create&quot;, {&#10;            method: &quot;POST&quot;,&#10;            headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;            body: JSON.stringify({ tenant_id: tenantId, suite_id: suiteId, description }),&#10;        });&#10;&#10;        const data = await res.json();&#10;&#10;        if (!res.ok) {&#10;            setError(data.error || &quot;Failed to submit request&quot;);&#10;        } else {&#10;            alert(&quot;Maintenance request submitted!&quot;);&#10;            setDescription(&quot;&quot;);&#10;        }&#10;&#10;        setLoading(false);&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;fixed inset-0 flex justify-center items-center bg-[#2f2f38] z-0&quot;&gt;&#10;            &lt;Card className=&quot;w-full max-w-lg p-10 shadow-2xl border-0 rounded-3xl bg-[#23232b]/90 mx-4&quot;&gt;&#10;                &lt;h2 className=&quot;text-3xl font-extrabold mb-8 text-center text-white drop-shadow&quot;&gt;Submit Maintenance Request&lt;/h2&gt;&#10;                &lt;form onSubmit={handleSubmit} className=&quot;space-y-7&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;Label htmlFor=&quot;description&quot; className=&quot;mb-2 block text-lg font-semibold text-gray-200&quot;&gt;Description&lt;/Label&gt;&#10;                        &lt;textarea&#10;                            id=&quot;description&quot;&#10;                            placeholder=&quot;Describe the maintenance issue&quot;&#10;                            value={description}&#10;                            onChange={(e) =&gt; setDescription(e.target.value)}&#10;                            required&#10;                            rows={6}&#10;                            className=&quot;w-full rounded-xl border border-purple-700/40 p-4 focus:outline-none focus:ring-2 focus:ring-purple-500 bg-[#2f2f38] text-gray-100 placeholder-gray-400 shadow-sm transition-all duration-200&quot;&#10;                        /&gt;&#10;                    &lt;/div&gt;&#10;                    {error &amp;&amp; &lt;p className=&quot;text-red-400 text-base font-medium text-center animate-pulse&quot;&gt;{error}&lt;/p&gt;}&#10;                    &lt;Button&#10;                        type=&quot;submit&quot;&#10;                        disabled={loading}&#10;                        className=&quot;w-full py-3 text-lg font-bold rounded-xl bg-gradient-to-r from-purple-700 to-purple-500 hover:from-purple-800 hover:to-purple-600 shadow-lg transition-all duration-200 disabled:opacity-60 text-white&quot;&#10;                    &gt;&#10;                        {loading ? (&#10;                            &lt;span className=&quot;flex items-center justify-center gap-2&quot;&gt;&#10;                                &lt;svg className=&quot;animate-spin h-5 w-5 text-white&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot;&gt;&lt;circle className=&quot;opacity-25&quot; cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;10&quot; stroke=&quot;currentColor&quot; strokeWidth=&quot;4&quot;&gt;&lt;/circle&gt;&lt;path className=&quot;opacity-75&quot; fill=&quot;currentColor&quot; d=&quot;M4 12a8 8 0 018-8v8z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&#10;                                Submitting...&#10;                            &lt;/span&gt;&#10;                        ) : &quot;Submit Request&quot;}&#10;                    &lt;/Button&gt;&#10;                &lt;/form&gt;&#10;            &lt;/Card&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSearchParams } from &quot;next/navigation&quot;;&#10;import { Card } from &quot;@/components/ui/card&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import { supabase } from &quot;@/app/lib/supabase/client&quot;;&#10;&#10;export default function MaintenanceRequestForm() {&#10;    const searchParams = useSearchParams();&#10;    const suiteId = searchParams.get(&quot;suiteId&quot;) || &quot;&quot;;&#10;    const [tenantId, setTenantId] = useState(&quot;&quot;);&#10;&#10;    const [description, setDescription] = useState(&quot;&quot;);&#10;    const [loading, setLoading] = useState(false);&#10;    const [error, setError] = useState(&quot;&quot;);&#10;&#10;    useEffect(() =&gt; {&#10;        async function fetchUserId() {&#10;            const { data: { user } } = await supabase.auth.getUser();&#10;            if (user) setTenantId(user.id);&#10;        }&#10;        fetchUserId();&#10;    }, []);&#10;&#10;    // Show error if required params are missing&#10;    if (!tenantId || !suiteId) {&#10;        return (&#10;            &lt;div className=&quot;flex items-center justify-center min-h-screen bg-[#2f2f38]&quot;&gt;&#10;                &lt;div className=&quot;bg-[#23232b] p-8 rounded-2xl shadow-xl text-center&quot;&gt;&#10;                    &lt;h2 className=&quot;text-2xl font-bold text-red-400 mb-4&quot;&gt;Missing Required Information&lt;/h2&gt;&#10;                    &lt;p className=&quot;text-gray-200 mb-2&quot;&gt;This page requires both a tenant and suite to be specified.&lt;/p&gt;&#10;                    &lt;p className=&quot;text-gray-400 text-sm&quot;&gt;Please access this page from your dashboard or contact support if you believe this is an error.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    async function handleSubmit(e: React.FormEvent) {&#10;        e.preventDefault();&#10;        setError(&quot;&quot;);&#10;        setLoading(true);&#10;&#10;        const res = await fetch(&quot;/api/maintenance/create&quot;, {&#10;            method: &quot;POST&quot;,&#10;            headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;            body: JSON.stringify({ tenant_id: tenantId, suite_id: suiteId, description }),&#10;        });&#10;&#10;        const data = await res.json();&#10;&#10;        if (!res.ok) {&#10;            setError(data.error || &quot;Failed to submit request&quot;);&#10;        } else {&#10;            alert(&quot;Maintenance request submitted!&quot;);&#10;            setDescription(&quot;&quot;);&#10;        }&#10;&#10;        setLoading(false);&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;fixed inset-0 flex justify-center items-center bg-[#2f2f38] z-0&quot;&gt;&#10;            &lt;Card className=&quot;w-full max-w-lg p-10 shadow-2xl border-0 rounded-3xl bg-[#23232b]/90 mx-4&quot;&gt;&#10;                &lt;h2 className=&quot;text-3xl font-extrabold mb-8 text-center text-white drop-shadow flex items-center gap-2&quot;&gt;&#10;                    &lt;svg className=&quot;w-8 h-8 text-purple-400&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; strokeWidth=&quot;2&quot; viewBox=&quot;0 0 24 24&quot;&gt;&lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.75 17.25v.008h.008v-.008H9.75zm4.5 0v.008h.008v-.008h-.008zm-7.5-2.25a2.25 2.25 0 012.25-2.25h7.5a2.25 2.25 0 012.25 2.25v2.25a2.25 2.25 0 01-2.25 2.25h-7.5a2.25 2.25 0 01-2.25-2.25v-2.25zm2.25-6.75V6.75A2.25 2.25 0 0111.25 4.5h1.5A2.25 2.25 0 0115 6.75v1.5&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&#10;                    Submit Maintenance Request&#10;                &lt;/h2&gt;&#10;                &lt;form onSubmit={handleSubmit} className=&quot;space-y-7&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;Label htmlFor=&quot;description&quot; className=&quot;mb-2 block text-lg font-semibold text-gray-200&quot;&gt;Description&lt;/Label&gt;&#10;                        &lt;textarea&#10;                            id=&quot;description&quot;&#10;                            placeholder=&quot;Describe the maintenance issue&quot;&#10;                            value={description}&#10;                            onChange={(e) =&gt; setDescription(e.target.value)}&#10;                            required&#10;                            rows={6}&#10;                            className=&quot;w-full rounded-xl border border-purple-700/40 p-4 focus:outline-none focus:ring-2 focus:ring-purple-500 bg-[#2f2f38] text-gray-100 placeholder-gray-400 shadow-sm transition-all duration-200&quot;&#10;                        /&gt;&#10;                    &lt;/div&gt;&#10;                    {error &amp;&amp; &lt;p className=&quot;text-red-400 text-base font-medium text-center animate-pulse&quot;&gt;{error}&lt;/p&gt;}&#10;                    &lt;Button&#10;                        type=&quot;submit&quot;&#10;                        disabled={loading}&#10;                        className=&quot;w-full py-3 text-lg font-bold rounded-xl bg-gradient-to-r from-purple-700 to-purple-500 hover:from-purple-800 hover:to-purple-600 shadow-lg transition-all duration-200 disabled:opacity-60 text-white&quot;&#10;                    &gt;&#10;                        {loading ? (&#10;                            &lt;span className=&quot;flex items-center justify-center gap-2&quot;&gt;&#10;                                &lt;svg className=&quot;animate-spin h-5 w-5 text-white&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot;&gt;&lt;circle className=&quot;opacity-25&quot; cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;10&quot; stroke=&quot;currentColor&quot; strokeWidth=&quot;4&quot;&gt;&lt;/circle&gt;&lt;path className=&quot;opacity-75&quot; fill=&quot;currentColor&quot; d=&quot;M4 12a8 8 0 018-8v8z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&#10;                                Submitting...&#10;                            &lt;/span&gt;&#10;                        ) : &quot;Submit Request&quot;}&#10;                    &lt;/Button&gt;&#10;                &lt;/form&gt;&#10;                &lt;div className=&quot;mt-10 border-t border-purple-900/30 pt-8&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-bold mb-4 text-purple-200 flex items-center gap-2&quot;&gt;&#10;                        &lt;svg className=&quot;w-5 h-5 text-purple-400&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; strokeWidth=&quot;2&quot; viewBox=&quot;0 0 24 24&quot;&gt;&lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M3 7v10a2 2 0 002 2h14a2 2 0 002-2V7&quot;&gt;&lt;/path&gt;&lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M16 3v4M8 3v4m-5 4h18&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&#10;                        Your Recent Requests&#10;                    &lt;/h3&gt;&#10;                    {/* Placeholder for recent requests, can be replaced with real data */}&#10;                    &lt;div className=&quot;text-gray-400 text-sm&quot;&gt;Coming soon: View your recent maintenance requests here.&lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/Card&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/tenant/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/tenant/page.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, { useEffect, useState } from 'react';&#10;import { supabase } from '@/app/lib/supabase/client';&#10;&#10;export default function tenantPage() {&#10;    const [loading, setLoading] = useState(true);&#10;    const [tenant, setTenant] = useState&lt;any&gt;(null);&#10;    const [error, setError] = useState(&quot;&quot;);&#10;&#10;    useEffect(() =&gt; {&#10;        async function fetchTenant() {&#10;            setLoading(true);&#10;            setError(&quot;&quot;);&#10;            // Get current user&#10;            const { data: { user }, error: userError } = await supabase.auth.getUser();&#10;            if (userError || !user) {&#10;                setError(&quot;You must be logged in to view your dashboard.&quot;);&#10;                setLoading(false);&#10;                return;&#10;            }&#10;            // Fetch tenancy record by tenant_id (user.id)&#10;            const { data, error: tenancyError } = await supabase&#10;                .from('tenancies')&#10;                .select('*')&#10;                .eq('tenant_id', user.id)&#10;                .eq('active', true)&#10;                .single();&#10;            if (tenancyError || !data) {&#10;                setError(&quot;No active tenancy found. You may not have a suite assigned yet.&quot;);&#10;                setLoading(false);&#10;                return;&#10;            }&#10;            setTenant(data);&#10;            setLoading(false);&#10;        }&#10;        fetchTenant();&#10;    }, []);&#10;&#10;    if (loading) {&#10;        return &lt;div className=&quot;flex items-center justify-center min-h-screen bg-gray-950 text-white&quot;&gt;Loading...&lt;/div&gt;;&#10;    }&#10;    if (error) {&#10;        return &lt;div className=&quot;flex items-center justify-center min-h-screen bg-gray-950 text-red-400&quot;&gt;{error}&lt;/div&gt;;&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;min-h-screen bg-[#181820] text-gray-100 flex flex-col items-center py-12 px-4&quot;&gt;&#10;            &lt;div className=&quot;w-full max-w-3xl mx-auto&quot;&gt;&#10;                &lt;h1 className=&quot;text-4xl font-extrabold mb-2 text-purple-300 text-center drop-shadow&quot;&gt;Tenant Dashboard&lt;/h1&gt;&#10;                &lt;p className=&quot;text-lg mb-8 text-gray-300 text-center&quot;&gt;Welcome to your dashboard. Here you can manage maintenance requests and view your suite details.&lt;/p&gt;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-8&quot;&gt;&#10;                    {/* Suite Details Card */}&#10;                    &lt;div className=&quot;bg-[#23232b] rounded-2xl shadow-lg p-8 flex flex-col items-start border border-purple-900/30&quot;&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold mb-4 text-purple-200 flex items-center gap-2&quot;&gt;&#10;                            &lt;span className=&quot;inline-block w-2 h-2 rounded-full bg-green-400 animate-pulse&quot;&gt;&lt;/span&gt;&#10;                            Your Suite&#10;                        &lt;/h2&gt;&#10;                        {tenant.suite_id ? (&#10;                            &lt;&gt;&#10;                                &lt;div className=&quot;mb-2&quot;&gt;&lt;span className=&quot;font-semibold text-purple-300&quot;&gt;Suite ID:&lt;/span&gt; {tenant.suite_id}&lt;/div&gt;&#10;                                &lt;div className=&quot;mb-2&quot;&gt;&lt;span className=&quot;font-semibold text-purple-300&quot;&gt;Lease Start:&lt;/span&gt; {tenant.start_date || '-'}&lt;/div&gt;&#10;                                &lt;div className=&quot;mb-2&quot;&gt;&lt;span className=&quot;font-semibold text-purple-300&quot;&gt;Lease End:&lt;/span&gt; {tenant.end_date || 'N/A'}&lt;/div&gt;&#10;                                &lt;div className=&quot;mb-2&quot;&gt;&lt;span className=&quot;font-semibold text-purple-300&quot;&gt;Status:&lt;/span&gt; &lt;span className=&quot;text-green-400&quot;&gt;Active&lt;/span&gt;&lt;/div&gt;&#10;                            &lt;/&gt;&#10;                        ) : (&#10;                            &lt;div className=&quot;text-gray-400&quot;&gt;No suite assigned yet.&lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                    {/* Maintenance Card */}&#10;                    &lt;div className=&quot;bg-[#23232b] rounded-2xl shadow-lg p-8 flex flex-col items-start border border-purple-900/30&quot;&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold mb-4 text-purple-200 flex items-center gap-2&quot;&gt;&#10;                            &lt;svg className=&quot;w-6 h-6 text-purple-400&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; strokeWidth=&quot;2&quot; viewBox=&quot;0 0 24 24&quot;&gt;&lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.75 17.25v.008h.008v-.008H9.75zm4.5 0v.008h.008v-.008h-.008zm-7.5-2.25a2.25 2.25 0 012.25-2.25h7.5a2.25 2.25 0 012.25 2.25v2.25a2.25 2.25 0 01-2.25 2.25h-7.5a2.25 2.25 0 01-2.25-2.25v-2.25zm2.25-6.75V6.75A2.25 2.25 0 0111.25 4.5h1.5A2.25 2.25 0 0115 6.75v1.5&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&#10;                            Maintenance&#10;                        &lt;/h2&gt;&#10;                        {tenant.suite_id ? (&#10;                            &lt;a&#10;                                href={`/tenant/maintenance?tenantId=${tenant.id}&amp;suiteId=${tenant.suite_id}`}&#10;                                className=&quot;inline-block mt-2 bg-gradient-to-r from-purple-700 to-purple-500 hover:from-purple-800 hover:to-purple-600 text-white font-bold px-6 py-2 rounded-lg shadow transition&quot;&#10;                            &gt;&#10;                                Request Maintenance&#10;                            &lt;/a&gt;&#10;                        ) : (&#10;                            &lt;div className=&quot;text-gray-400&quot;&gt;You do not have a suite assigned yet. Please contact management if you believe this is an error.&lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useEffect, useState } from 'react';&#10;import { supabase } from '@/app/lib/supabase/client';&#10;&#10;export default function tenantPage() {&#10;    const [loading, setLoading] = useState(true);&#10;    const [tenant, setTenant] = useState&lt;any&gt;(null);&#10;    const [error, setError] = useState(&quot;&quot;);&#10;&#10;    useEffect(() =&gt; {&#10;        async function fetchTenant() {&#10;            setLoading(true);&#10;            setError(&quot;&quot;);&#10;            // Get current user&#10;            const { data: { user }, error: userError } = await supabase.auth.getUser();&#10;            if (userError || !user) {&#10;                setError(&quot;You must be logged in to view your dashboard.&quot;);&#10;                setLoading(false);&#10;                return;&#10;            }&#10;            // Fetch tenancy record by tenant_id (user.id)&#10;            const { data, error: tenancyError } = await supabase&#10;                .from('tenancies')&#10;                .select('*')&#10;                .eq('tenant_id', user.id)&#10;                .eq('active', true)&#10;                .single();&#10;            if (tenancyError || !data) {&#10;                setError(&quot;No active tenancy found. You may not have a suite assigned yet.&quot;);&#10;                setLoading(false);&#10;                return;&#10;            }&#10;            // Fetch suite to ensure it exists&#10;            if (!data.suite_id) {&#10;                setError(&quot;No suite assigned to your tenancy. Please contact management.&quot;);&#10;                setLoading(false);&#10;                return;&#10;            }&#10;            const { data: suite, error: suiteError } = await supabase&#10;                .from('suites')&#10;                .select('id')&#10;                .eq('id', data.suite_id)&#10;                .single();&#10;            if (suiteError || !suite) {&#10;                setError(&quot;Your assigned suite no longer exists. Please contact management.&quot;);&#10;                setLoading(false);&#10;                return;&#10;            }&#10;            setTenant(data);&#10;            setLoading(false);&#10;        }&#10;        fetchTenant();&#10;    }, []);&#10;&#10;    if (loading) {&#10;        return &lt;div className=&quot;flex items-center justify-center min-h-screen bg-gray-950 text-white&quot;&gt;Loading...&lt;/div&gt;;&#10;    }&#10;    if (error) {&#10;        return &lt;div className=&quot;flex items-center justify-center min-h-screen bg-gray-950 text-red-400&quot;&gt;{error}&lt;/div&gt;;&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;min-h-screen bg-[#181820] text-gray-100 flex flex-col items-center py-12 px-4&quot;&gt;&#10;            &lt;div className=&quot;w-full max-w-3xl mx-auto&quot;&gt;&#10;                &lt;h1 className=&quot;text-4xl font-extrabold mb-2 text-purple-300 text-center drop-shadow&quot;&gt;Tenant Dashboard&lt;/h1&gt;&#10;                &lt;p className=&quot;text-lg mb-8 text-gray-300 text-center&quot;&gt;Welcome to your dashboard. Here you can manage maintenance requests and view your suite details.&lt;/p&gt;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-8&quot;&gt;&#10;                    {/* Suite Details Card */}&#10;                    &lt;div className=&quot;bg-[#23232b] rounded-2xl shadow-lg p-8 flex flex-col items-start border border-purple-900/30&quot;&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold mb-4 text-purple-200 flex items-center gap-2&quot;&gt;&#10;                            &lt;span className=&quot;inline-block w-2 h-2 rounded-full bg-green-400 animate-pulse&quot;&gt;&lt;/span&gt;&#10;                            Your Suite&#10;                        &lt;/h2&gt;&#10;                        {tenant.suite_id ? (&#10;                            &lt;&gt;&#10;                                &lt;div className=&quot;mb-2&quot;&gt;&lt;span className=&quot;font-semibold text-purple-300&quot;&gt;Suite ID:&lt;/span&gt; {tenant.suite_id}&lt;/div&gt;&#10;                                &lt;div className=&quot;mb-2&quot;&gt;&lt;span className=&quot;font-semibold text-purple-300&quot;&gt;Lease Start:&lt;/span&gt; {tenant.start_date || '-'}&lt;/div&gt;&#10;                                &lt;div className=&quot;mb-2&quot;&gt;&lt;span className=&quot;font-semibold text-purple-300&quot;&gt;Lease End:&lt;/span&gt; {tenant.end_date || 'N/A'}&lt;/div&gt;&#10;                                &lt;div className=&quot;mb-2&quot;&gt;&lt;span className=&quot;font-semibold text-purple-300&quot;&gt;Status:&lt;/span&gt; &lt;span className=&quot;text-green-400&quot;&gt;Active&lt;/span&gt;&lt;/div&gt;&#10;                            &lt;/&gt;&#10;                        ) : (&#10;                            &lt;div className=&quot;text-gray-400&quot;&gt;No suite assigned yet.&lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                    {/* Maintenance Card */}&#10;                    &lt;div className=&quot;bg-[#23232b] rounded-2xl shadow-lg p-8 flex flex-col items-start border border-purple-900/30&quot;&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold mb-4 text-purple-200 flex items-center gap-2&quot;&gt;&#10;                            &lt;svg className=&quot;w-6 h-6 text-purple-400&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; strokeWidth=&quot;2&quot; viewBox=&quot;0 0 24 24&quot;&gt;&lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.75 17.25v.008h.008v-.008H9.75zm4.5 0v.008h.008v-.008h-.008zm-7.5-2.25a2.25 2.25 0 012.25-2.25h7.5a2.25 2.25 0 012.25 2.25v2.25a2.25 2.25 0 01-2.25 2.25h-7.5a2.25 2.25 0 01-2.25-2.25v-2.25zm2.25-6.75V6.75A2.25 2.25 0 0111.25 4.5h1.5A2.25 2.25 0 0115 6.75v1.5&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&#10;                            Maintenance&#10;                        &lt;/h2&gt;&#10;                        {tenant.suite_id ? (&#10;                            &lt;a&#10;                                href={`/tenant/maintenance?tenantId=${tenant.id}&amp;suiteId=${tenant.suite_id}`}&#10;                                className=&quot;inline-block mt-2 bg-gradient-to-r from-purple-700 to-purple-500 hover:from-purple-800 hover:to-purple-600 text-white font-bold px-6 py-2 rounded-lg shadow transition&quot;&#10;                            &gt;&#10;                                Request Maintenance&#10;                            &lt;/a&gt;&#10;                        ) : (&#10;                            &lt;div className=&quot;text-gray-400&quot;&gt;You do not have a suite assigned yet. Please contact management if you believe this is an error.&lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/admin-navbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/admin-navbar.tsx" />
              <option name="originalContent" value="import Link from &quot;next/link&quot;;&#10;&#10;export default function AdminNavbar() {&#10;  return (&#10;    &lt;nav className=&quot;w-full bg-[#23232b] border-b border-purple-900/30 px-6 h-16 flex items-center justify-between z-50&quot;&gt;&#10;      &lt;div className=&quot;flex items-center gap-6&quot;&gt;&#10;        &lt;Link href=&quot;/admin&quot; className=&quot;text-xl font-extrabold text-purple-400 tracking-wide&quot;&gt;Admin&lt;/Link&gt;&#10;        &lt;Link href=&quot;/admin/tenants&quot; className=&quot;text-gray-300 hover:text-purple-300 transition&quot;&gt;Tenants&lt;/Link&gt;&#10;        &lt;Link href=&quot;/admin/suites&quot; className=&quot;text-gray-300 hover:text-purple-300 transition&quot;&gt;Suites&lt;/Link&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;text-gray-400 text-sm&quot;&gt;A-List Suites Admin&lt;/div&gt;&#10;    &lt;/nav&gt;&#10;  );&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import Link from &quot;next/link&quot;;&#13;&#10;&#13;&#10;export default function AdminNavbar() {&#13;&#10;  return (&#13;&#10;    &lt;nav className=&quot;w-full bg-[#23232b] border-b border-purple-900/30 px-6 h-16 flex items-center justify-between z-50&quot;&gt;&#13;&#10;      &lt;div className=&quot;flex items-center gap-6&quot;&gt;&#13;&#10;        &lt;Link href=&quot;/admin&quot; className=&quot;text-xl font-extrabold text-purple-400 tracking-wide&quot;&gt;Admin&lt;/Link&gt;&#13;&#10;        &lt;Link href=&quot;/admin/tenants&quot; className=&quot;text-gray-300 hover:text-purple-300 transition&quot;&gt;Tenants&lt;/Link&gt;&#13;&#10;        &lt;Link href=&quot;/admin/suites&quot; className=&quot;text-gray-300 hover:text-purple-300 transition&quot;&gt;Suites&lt;/Link&gt;&#13;&#10;        &lt;Link href=&quot;/admin/maintenance&quot; className=&quot;text-gray-300 hover:text-purple-300 transition&quot;&gt;Maintenance&lt;/Link&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;      &lt;div className=&quot;text-gray-400 text-sm&quot;&gt;A-List Suites Admin&lt;/div&gt;&#13;&#10;    &lt;/nav&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>